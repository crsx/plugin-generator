/* Copyright ï¿½ 2012 IBM Corporation. */
/*
 * generated by Xtext
 */
package ${package}.ui;

import ${package}.ui.contentassist.CrsxEditStrategyProvider;
import ${package}.ui.outline.CrsxGroupFunctionsAction;
import ${package}.ui.preferences.CrsxRootPreferencePage;
import ${package}.ui.syntaxcoloring.CrsxHighlightingConfiguration;
import ${package}.ui.syntaxcoloring.CrsxSemanticHighlightingCalculator;
import ${package}.ui.syntaxcoloring.CrsxTokenToAttributeIdMapper;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.resource.containers.IAllContainersState;
import org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider;
import org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution;
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;

import com.google.inject.Binder;
import com.google.inject.Provider;

/**
 * Use this class to register components to be used within the IDE.
 */
public class CrsxUiModule extends ${package}.ui.AbstractCrsxUiModule {
	public CrsxUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}

	public void configureHighlightingConfiguration(Binder binder) {
		binder.bind(IHighlightingConfiguration.class).to(
				CrsxHighlightingConfiguration.class);

	}

	public void configureTokenTypeToStringMapper(Binder binder) {
		binder.bind(AbstractAntlrTokenToAttributeIdMapper.class).to(
				CrsxTokenToAttributeIdMapper.class);
	}
	
	
    public void configureGroupingAction(Binder binder) {
          binder.bind(IOutlineContribution.class).annotatedWith(com.google.inject.name.Names.named("groupFunctions")).to(CrsxGroupFunctionsAction.class);
    }

	@Override
	public Class<? extends AbstractEditStrategyProvider> bindAbstractEditStrategyProvider() {
		return CrsxEditStrategyProvider.class;
	}

	public Class<? extends org.eclipse.xtext.ui.editor.preferences.LanguageRootPreferencePage> bindLanguageRootPreferencePage() {
		return CrsxRootPreferencePage.class;
	}

	public Class<? extends ISemanticHighlightingCalculator> bindSemanticHighlightingCalculator() {
		return CrsxSemanticHighlightingCalculator.class;
	}

	// Provide Project-based container.
	public Provider<IAllContainersState> provideIAllContainersState() {
		return org.eclipse.xtext.ui.shared.Access.getWorkspaceProjectsState();
	}
	
	@Override
    public void configureHighlightingLexer(com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.parser.antlr.Lexer.class).annotatedWith(com.google.inject.name.Names.named(org.eclipse.xtext.ui.LexerUIBindings.HIGHLIGHTING)).to(${package}.lexer.CrsxCustomLexer.class);
    }

}
